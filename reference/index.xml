<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Qbec</title>
    <link>http://qbec.io/reference/</link>
    <description>Recent content in Reference on Qbec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://qbec.io/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Application YAML</title>
      <link>http://qbec.io/reference/qbec-yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/qbec-yaml/</guid>
      <description>The app configuration is a file called qbec.yaml and needs to be at the root of the directory tree.
apiVersion: qbec.io/v1alpha1 # only supported version currently kind: App # must always be &amp;quot;App&amp;quot; metadata: name: my-app # app name. Allows multiple qbec apps to deploy different objects to the same namespace without GC collisions spec: componentsDir: components # directory where component files can be found. Not recursive. default: components paramsFile: params.</description>
    </item>
    
    <item>
      <title>Qbec directives</title>
      <link>http://qbec.io/reference/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/directives/</guid>
      <description>Annotations that you can use for your objects to control qbec behavior.
directives.qbec.io/apply-order  Annotation source: local object Allowed values: Any positive integer as a string (i.e. ensure that the value is quoted in YAML) Default value: &amp;quot;0&amp;quot; (use qbec defaults)  controls the order in which objects are applied. This allows you, for example, to move updates of a custom resource to after all other objects have been processed.</description>
    </item>
    
    <item>
      <title>Standard jsonnet variables</title>
      <link>http://qbec.io/reference/jsonnet-vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/jsonnet-vars/</guid>
      <description>qbec exposes the following standard jsonnet variables whenever it evaluates components.
 qbec.io/env - the name of the environment for which processing occurs. qbec.io/envProperties - the properties associated with the environment if present or an empty object. For the baseline environment (_), this is set to the baseProperties object define in qbec.yaml. qbec.io/tag - the tag specified for the command using the --app-tag option. qbec.io/defaultNs - the default namespace in use.</description>
    </item>
    
    <item>
      <title>Metadata for K8s objects</title>
      <link>http://qbec.io/reference/gen-metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/gen-metadata/</guid>
      <description>Labels All Kubernetes objects produced by qbec have the following labels associated with them:
 qbec.io/application - the app name from qbec.yaml. qbec.io/environment - the environment name in qbec.yaml for which the object was created. qbec.io/tag - the --app-tag parameter passed in on the command line. This label is only set when non-blank.  The labels are used to efficiently find all cluster objects for a specific app and environment (and tag, if specified) for garbage collection.</description>
    </item>
    
    <item>
      <title>Jsonnet native functions</title>
      <link>http://qbec.io/reference/jsonnet-native-funcs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/jsonnet-native-funcs/</guid>
      <description>A list of all native functions that qbec natively supports.
expandHelmTemplate this function is now deprecated. Integrate with helm using external data sources instead
The expandHelmTemplate function expands a helm chart and returns the resulting objects. This is EXPERIMENTAL in nature - the API is subject to change in a subsequent release. It runs the helm template command, assuming that the helm binary is already installed and available in the PATH.</description>
    </item>
    
    <item>
      <title>Jsonnet glob importer</title>
      <link>http://qbec.io/reference/jsonnet-glob-importer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/jsonnet-glob-importer/</guid>
      <description>In many situations it is useful to be able to import a bag of files as an object. For instance, it is convenient to load all environment configuration files present with a single invocation to import to pick up all files found without having to name them individually.
For this purpose, qbec supplies a glob importer for importing a bag of files using a glob pattern. It supports two variants, one for importing the files that match the glob as code and another for importing the files as a string (suitable, for example, for YAML files).</description>
    </item>
    
    <item>
      <title>Jsonnet data importer</title>
      <link>http://qbec.io/reference/jsonnet-external-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/jsonnet-external-data/</guid>
      <description>Sometimes you need to generate data using external programs and be able to access it in your jsonnet components. This can be accomplished using the data source importer that ships with qbec.
While the design of the importer allows for tight, native integration with tools like helm, istioctl, kustomize, and secret engines like vault, the only integration that is currently implemented is exec that allows you to run external programs and use the standard output they produce as data in jsonnet code.</description>
    </item>
    
    <item>
      <title>Component evaluation</title>
      <link>http://qbec.io/reference/component-evaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/component-evaluation/</guid>
      <description>How qbec evaluates component code using jsonnet and what it expects the output to look like.
Component loading  Consider every .jsonnet, .json, and .yaml file directly under the component directory as a component to be loaded. In this case, the component name is the file name without the extension. Check immediate subdirectories of the component directory to see if they contain an index.jsonnet or index.yaml file. If so, create a component with the sub-directory name.</description>
    </item>
    
    <item>
      <title>Diffs and patches</title>
      <link>http://qbec.io/reference/diffs-and-patches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/diffs-and-patches/</guid>
      <description>qbec uses a 3-way merge patch similar to kubectl/ksonnet apply. The Kubernetes documentation describes how this works.
For existing objects, the qbec diff command produces a diff between the last applied configuration stored on the server and the current configuration of the object loaded from source. This diff is &amp;ldquo;clean&amp;rdquo; in the sense of the remote object not having additional fields, default values and so on. It faithfully represents the change between the previous and current version of the object produced from source code.</description>
    </item>
    
    <item>
      <title>Garbage collection</title>
      <link>http://qbec.io/reference/garbage-collection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/reference/garbage-collection/</guid>
      <description>While garbage collection is supported as a first-class operation qbec and enabled by default, it is a complex, nuanced subject fraught with special cases. We hope that the explanation below can help users figure out the causes of issues they might see in this area and create better bug reports.
What garbage collection means Garbage collection is the act of deleting objects that were once applied for a qbec app but no longer exist in source code.</description>
    </item>
    
  </channel>
</rss>