<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using qbec on Qbec</title>
    <link>http://qbec.io/userguide/usage/</link>
    <description>Recent content in Using qbec on Qbec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://qbec.io/userguide/usage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Folders, files, parameters</title>
      <link>http://qbec.io/userguide/usage/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/basic/</guid>
      <description>At the very least, you need to have the following files and folders for a qbec app:
 qbec.yaml - this needs to be at the root of the source directory and defines your application in terms of:  supported environments components that should be excluded by default for all environments specific components excluded and included in specific environments. See the reference document for more details.   a folder for components.</description>
    </item>
    
    <item>
      <title>Create components</title>
      <link>http://qbec.io/userguide/usage/authoring/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/authoring/</guid>
      <description>qbec supports components written as YAML, JSON or jsonnet files. YAML and JSON documents are static and unable to support parameterization per environment. These formats are good enough for Kubernetes objects like roles, role bindings, service accounts etc. where the content doesn&amp;rsquo;t usually vary per environment. In order to create components that need to be different per environment, you are pretty much required to use jsonnet.
Component structure Components are loaded from the components directory defined for your app.</description>
    </item>
    
    <item>
      <title>Common object metadata</title>
      <link>http://qbec.io/userguide/usage/common-metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/common-metadata/</guid>
      <description>qbec provides an easy mechanism to set up common metadata like annotations for all objects produced. For example, you may want to set up a team annotation for all objects.
You do this by defining a post-processor. A post-processor is a jsonnet file that contains a single function like so:
// the post processor jsonnet must return a function taking exactly one parameter // called &amp;quot;object&amp;quot; and returning its decorated version.</description>
    </item>
    
    <item>
      <title>Runtime parameters</title>
      <link>http://qbec.io/userguide/usage/runtime-params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/runtime-params/</guid>
      <description>Runtime parameters are values that differ across environments, change over time, or are secrets that should not be casually revealed.
Properties like replicas of a deployment per environment, cluster level endpoints etc. are usually known in advance and should be checked into source code.
Some parameters cannot be checked into source code. These include tags for images produced by a CI build whose value should be subsequently used in the same build for a deployment, environment-specific secrets, etc.</description>
    </item>
    
    <item>
      <title>Branch builds and CI</title>
      <link>http://qbec.io/userguide/usage/branches-and-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/branches-and-ci/</guid>
      <description>You have created jsonnet components, a qbec.yaml file and declared a dev environment. These are good enough for local development and/ or commits to a main branch. Now you are looking for a way to create objects with slightly different names as part of functional tests of your pull request builds.
You want to ensure that each branch build runs in its own &amp;ldquo;scope&amp;rdquo; and does not interfere with your main builds.</description>
    </item>
    
    <item>
      <title>Controlling qbec behavior</title>
      <link>http://qbec.io/userguide/usage/directives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/directives/</guid>
      <description>qbec usually does the right thing when applying objects. Sometimes this behavior needs tweaking. Qbec allows you to annotate objects with specific directives to control its behavior. All annotations are in the directives.qbec.io/ namespace.
Updating and deleting objects Usually qbec will update and delete objects as required. You can &amp;ldquo;lock&amp;rdquo; objects from being updated or deleted using the following annotations:
 directives.qbec.io/update-policy: never directives.qbec.io/delete-policy: never  The first is useful when dealing with jobs that typically should not be updated.</description>
    </item>
    
    <item>
      <title>Running qbec commands</title>
      <link>http://qbec.io/userguide/usage/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/commands/</guid>
      <description>The qbec CLI provides usage help for all commands. The commands that qbec supports are:
$ qbec --help qbec provides a set of commands to manage kubernetes objects on multiple clusters. Usage: qbec [command] Available Commands: alpha experimental qbec commands apply apply one or more components to a Kubernetes cluster completion Output shell completion for bash component component lists and diffs delete delete one or more components from a Kubernetes cluster diff diff one or more components against objects in a Kubernetes cluster env environment lists and details eval evaluate the supplied file optionally under a qbec environment fmt format jsonnet, yaml or json files help Help about any command init initialize a qbec app param parameter lists and diffs show show output in YAML or JSON format for one or more components validate validate one or more components against the spec of a kubernetes cluster version print program version .</description>
    </item>
    
    <item>
      <title>Tips and tricks</title>
      <link>http://qbec.io/userguide/usage/tips-and-tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://qbec.io/userguide/usage/tips-and-tricks/</guid>
      <description>Runtime   qbec is written to have good performance even when dealing with hundreds of objects. That said, this is wholly dependent on how long a basic command like qbec show takes to execute. Most of the time taken by qbec show is in component evaluation, which in turn is dependent on the performance of jsonnet libraries that your components use. A good rule of thumb is that you will have an enjoyable experience with qbec if qbec show executes in less than a second or two and a poorer experience otherwise.</description>
    </item>
    
  </channel>
</rss>
